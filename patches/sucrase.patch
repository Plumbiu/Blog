diff --git a/dist/esm/index.js b/dist/esm/index.js
index 41a7aa0812c673a291d8ccf719a318dc5a0fc1c5..0593190b68296e7303e4584ab425b383a6478133 100644
--- a/dist/esm/index.js
+++ b/dist/esm/index.js
@@ -1,9 +1,7 @@
 import CJSImportProcessor from "./CJSImportProcessor";
-import computeSourceMap, {} from "./computeSourceMap";
 import {HelperManager} from "./HelperManager";
 import identifyShadowedGlobals from "./identifyShadowedGlobals";
 import NameManager from "./NameManager";
-import {validateOptions} from "./Options";
 
 import {parse} from "./parser";
 
@@ -33,7 +31,6 @@ export function getVersion() {
 }
 
 export function transform(code, options) {
-  validateOptions(options);
   try {
     const sucraseContext = getSucraseContext(code, options);
     const transformer = new RootTransformer(
@@ -48,16 +45,6 @@ export function transform(code, options) {
       if (!options.filePath) {
         throw new Error("filePath must be specified when generating a source map.");
       }
-      result = {
-        ...result,
-        sourceMap: computeSourceMap(
-          transformerResult,
-          options.filePath,
-          options.sourceMapOptions,
-          code,
-          sucraseContext.tokenProcessor.tokens,
-        ),
-      };
     }
     return result;
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
diff --git a/dist/esm/transformers/RootTransformer.js b/dist/esm/transformers/RootTransformer.js
index c7a83fefc1240601906e7dbc3cda8ca9bca6cb03..4602f1b616f0a5014473aae801a934665ec0d24a 100644
--- a/dist/esm/transformers/RootTransformer.js
+++ b/dist/esm/transformers/RootTransformer.js
@@ -6,17 +6,13 @@ import {TokenType as tt} from "../parser/tokenizer/types";
 
 import getClassInfo, {} from "../util/getClassInfo";
 import CJSImportTransformer from "./CJSImportTransformer";
-import ESMImportTransformer from "./ESMImportTransformer";
 import FlowTransformer from "./FlowTransformer";
-import JestHoistTransformer from "./JestHoistTransformer";
 import JSXTransformer from "./JSXTransformer";
 import NumericSeparatorTransformer from "./NumericSeparatorTransformer";
 import OptionalCatchBindingTransformer from "./OptionalCatchBindingTransformer";
 import OptionalChainingNullishTransformer from "./OptionalChainingNullishTransformer";
 import ReactDisplayNameTransformer from "./ReactDisplayNameTransformer";
-import ReactHotLoaderTransformer from "./ReactHotLoaderTransformer";
 
-import TypeScriptTransformer from "./TypeScriptTransformer";
 
 
 
@@ -68,14 +64,6 @@ export default class RootTransformer {
       );
     }
 
-    let reactHotLoaderTransformer = null;
-    if (transforms.includes("react-hot-loader")) {
-      if (!options.filePath) {
-        throw new Error("filePath is required when using the react-hot-loader transform.");
-      }
-      reactHotLoaderTransformer = new ReactHotLoaderTransformer(tokenProcessor, options.filePath);
-      this.transformers.push(reactHotLoaderTransformer);
-    }
 
     // Note that we always want to enable the imports transformer, even when the import transform
     // itself isn't enabled, since we need to do type-only import pruning for both Flow and
@@ -91,7 +79,6 @@ export default class RootTransformer {
           importProcessor,
           this.nameManager,
           this.helperManager,
-          reactHotLoaderTransformer,
           enableLegacyBabel5ModuleInterop,
           Boolean(options.enableLegacyTypeScriptModuleInterop),
           transforms.includes("typescript"),
@@ -100,19 +87,6 @@ export default class RootTransformer {
           Boolean(options.keepUnusedImports),
         ),
       );
-    } else {
-      this.transformers.push(
-        new ESMImportTransformer(
-          tokenProcessor,
-          this.nameManager,
-          this.helperManager,
-          reactHotLoaderTransformer,
-          transforms.includes("typescript"),
-          transforms.includes("flow"),
-          Boolean(options.keepUnusedImports),
-          options,
-        ),
-      );
     }
 
     if (transforms.includes("flow")) {
@@ -120,16 +94,6 @@ export default class RootTransformer {
         new FlowTransformer(this, tokenProcessor, transforms.includes("imports")),
       );
     }
-    if (transforms.includes("typescript")) {
-      this.transformers.push(
-        new TypeScriptTransformer(this, tokenProcessor, transforms.includes("imports")),
-      );
-    }
-    if (transforms.includes("jest")) {
-      this.transformers.push(
-        new JestHoistTransformer(this, tokenProcessor, this.nameManager, importProcessor),
-      );
-    }
   }
 
   transform() {
