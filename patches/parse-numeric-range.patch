diff --git a/index.d.ts b/index.d.ts
index 162d3ea875b558d429e2a1af9404c14aa41e4252..7d1285361fb079130a1b9a2799c0e05772db1cca 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -2,5 +2,5 @@
  * Parses expressions like `1-10,20-30`. Returns an energetic (as opposed to lazy) array.
  * @param expression a numeric range expression
  */
- declare function parse(expression: string): number[];
+ declare function parse(expression: string): Set<number>;
  export = parse;
\ No newline at end of file
diff --git a/index.js b/index.js
index a3d8cbc885ccbe7fb7efa2a00addb545792c47f8..90b51c1dba8d268842097a9ffba1520322c5426e 100644
--- a/index.js
+++ b/index.js
@@ -2,17 +2,19 @@
  * @param {string} string    The string to parse
  * @returns {Array<number>}  Returns an energetic array.
  */
+
+const RangeNumRegx = /^-?\d+$/
+const LineRegx = /^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/
 function parsePart(string) {
-  let res = [];
+  let res = new Set();
   let m;
 
-  for (let str of string.split(",").map((str) => str.trim())) {
+  for (let str of string.split(",")) {
+    str = str.trim()
     // just a number
-    if (/^-?\d+$/.test(str)) {
-      res.push(parseInt(str, 10));
-    } else if (
-      (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/))
-    ) {
+    if (RangeNumRegx.test(str)) {
+      res.add(parseInt(str, 10));
+    } else if (m = str.match(LineRegx)) {
       // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)
       let [_, lhs, sep, rhs] = m;
 
@@ -24,7 +26,7 @@ function parsePart(string) {
         // Make it inclusive by moving the right 'stop-point' away by one.
         if (sep === "-" || sep === ".." || sep === "\u2025") rhs += incr;
 
-        for (let i = lhs; i !== rhs; i += incr) res.push(i);
+        for (let i = lhs; i !== rhs; i += incr) res.add(i);
       }
     }
   }
