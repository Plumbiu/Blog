diff --git a/index.js b/index.js
index a3d8cbc885ccbe7fb7efa2a00addb545792c47f8..01f6a4cb362a17159c457b49b1f5cb2e11b9957a 100644
--- a/index.js
+++ b/index.js
@@ -2,35 +2,36 @@
  * @param {string} string    The string to parse
  * @returns {Array<number>}  Returns an energetic array.
  */
+const IsNum_Regx = /^-?\d+$/
+const NumRange_Regx = /^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/
 function parsePart(string) {
-  let res = [];
-  let m;
+  let res = []
+  let m
 
-  for (let str of string.split(",").map((str) => str.trim())) {
+  for (let str of string.split(',')) {
+    str = str.trim()
     // just a number
-    if (/^-?\d+$/.test(str)) {
-      res.push(parseInt(str, 10));
-    } else if (
-      (m = str.match(/^(-?\d+)(-|\.\.\.?|\u2025|\u2026|\u22EF)(-?\d+)$/))
-    ) {
+    if (IsNum_Regx.test(str)) {
+      res.push(parseInt(str, 10))
+    } else if ((m = str.match(NumRange_Regx))) {
       // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)
-      let [_, lhs, sep, rhs] = m;
+      let [_, lhs, sep, rhs] = m
 
       if (lhs && rhs) {
-        lhs = parseInt(lhs);
-        rhs = parseInt(rhs);
-        const incr = lhs < rhs ? 1 : -1;
+        lhs = parseInt(lhs)
+        rhs = parseInt(rhs)
+        const incr = lhs < rhs ? 1 : -1
 
         // Make it inclusive by moving the right 'stop-point' away by one.
-        if (sep === "-" || sep === ".." || sep === "\u2025") rhs += incr;
+        if (sep === '-' || sep === '..' || sep === '\u2025') rhs += incr
 
-        for (let i = lhs; i !== rhs; i += incr) res.push(i);
+        for (let i = lhs; i !== rhs; i += incr) res.push(i)
       }
     }
   }
 
-  return res;
+  return res
 }
 
-exports.default = parsePart;
-module.exports = parsePart;
+exports.default = parsePart
+module.exports = parsePart
