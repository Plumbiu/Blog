diff --git a/lib/index.js b/lib/index.js
index c415714eec946fe4c996c89ff050b922c9e39d86..3c758a9408fa99d67d2a3be5c672cea1728298f0 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -348,7 +348,6 @@
 
 import {bail} from 'bail'
 import extend from 'extend'
-import {ok as assert} from 'devlop'
 import isPlainObj from 'is-plain-obj'
 import {trough} from 'trough'
 import {VFile} from 'vfile'
@@ -575,7 +574,6 @@ export class Processor extends CallableInstance {
     if (typeof key === 'string') {
       // Set `key`.
       if (arguments.length === 2) {
-        assertUnfrozen('data', this.frozen)
         this.namespace[key] = value
         return this
       }
@@ -586,7 +584,6 @@ export class Processor extends CallableInstance {
 
     // Set space.
     if (key) {
-      assertUnfrozen('data', this.frozen)
       this.namespace = key
       return this
     }
@@ -664,7 +661,6 @@ export class Processor extends CallableInstance {
     this.freeze()
     const realFile = vfile(file)
     const parser = this.parser || this.Parser
-    assertParser('parse', parser)
     return parser(String(realFile), realFile)
   }
 
@@ -714,8 +710,6 @@ export class Processor extends CallableInstance {
     const self = this
 
     this.freeze()
-    assertParser('process', this.parser || this.Parser)
-    assertCompiler('process', this.compiler || this.Compiler)
 
     return done ? executor(undefined, done) : new Promise(executor)
 
@@ -768,7 +762,6 @@ export class Processor extends CallableInstance {
         } else if (resolve) {
           resolve(file)
         } else {
-          assert(done, '`done` is defined if `resolve` is not')
           done(undefined, file)
         }
       }
@@ -813,12 +806,8 @@ export class Processor extends CallableInstance {
     let result
 
     this.freeze()
-    assertParser('processSync', this.parser || this.Parser)
-    assertCompiler('processSync', this.compiler || this.Compiler)
 
     this.process(file, realDone)
-    assertDone('processSync', 'process', complete)
-    assert(result, 'we either bailed on an error or have a tree')
 
     return result
 
@@ -871,7 +860,6 @@ export class Processor extends CallableInstance {
    *   transformed tree.
    */
   run(tree, file, done) {
-    assertNode(tree)
     this.freeze()
 
     const transformers = this.transformers
@@ -893,10 +881,6 @@ export class Processor extends CallableInstance {
      * @returns {undefined}
      */
     function executor(resolve, reject) {
-      assert(
-        typeof file !== 'function',
-        '`file` canâ€™t be a `done` anymore, we checked'
-      )
       const realFile = vfile(file)
       transformers.run(tree, realFile, realDone)
 
@@ -917,7 +901,6 @@ export class Processor extends CallableInstance {
         } else if (resolve) {
           resolve(resultingTree)
         } else {
-          assert(done, '`done` is defined if `resolve` is not')
           done(undefined, resultingTree, file)
         }
       }
@@ -949,8 +932,6 @@ export class Processor extends CallableInstance {
 
     this.run(tree, file, realDone)
 
-    assertDone('runSync', 'run', complete)
-    assert(result, 'we either bailed on an error or have a tree')
     return result
 
     /**
@@ -996,8 +977,6 @@ export class Processor extends CallableInstance {
     this.freeze()
     const realFile = vfile(file)
     const compiler = this.compiler || this.Compiler
-    assertCompiler('stringify', compiler)
-    assertNode(tree)
 
     return compiler(tree, realFile)
   }
@@ -1063,8 +1042,6 @@ export class Processor extends CallableInstance {
     const attachers = this.attachers
     const namespace = this.namespace
 
-    assertUnfrozen('use', this.frozen)
-
     if (value === null || value === undefined) {
       // Empty.
     } else if (typeof value === 'function') {
@@ -1202,80 +1179,6 @@ export class Processor extends CallableInstance {
  */
 export const unified = new Processor().freeze()
 
-/**
- * Assert a parser is available.
- *
- * @param {string} name
- * @param {unknown} value
- * @returns {asserts value is Parser}
- */
-function assertParser(name, value) {
-  if (typeof value !== 'function') {
-    throw new TypeError('Cannot `' + name + '` without `parser`')
-  }
-}
-
-/**
- * Assert a compiler is available.
- *
- * @param {string} name
- * @param {unknown} value
- * @returns {asserts value is Compiler}
- */
-function assertCompiler(name, value) {
-  if (typeof value !== 'function') {
-    throw new TypeError('Cannot `' + name + '` without `compiler`')
-  }
-}
-
-/**
- * Assert the processor is not frozen.
- *
- * @param {string} name
- * @param {unknown} frozen
- * @returns {asserts frozen is false}
- */
-function assertUnfrozen(name, frozen) {
-  if (frozen) {
-    throw new Error(
-      'Cannot call `' +
-        name +
-        '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
-    )
-  }
-}
-
-/**
- * Assert `node` is a unist node.
- *
- * @param {unknown} node
- * @returns {asserts node is Node}
- */
-function assertNode(node) {
-  // `isPlainObj` unfortunately uses `any` instead of `unknown`.
-  // type-coverage:ignore-next-line
-  if (!isPlainObj(node) || typeof node.type !== 'string') {
-    throw new TypeError('Expected node, got `' + node + '`')
-    // Fine.
-  }
-}
-
-/**
- * Assert that `complete` is `true`.
- *
- * @param {string} name
- * @param {string} asyncName
- * @param {unknown} complete
- * @returns {asserts complete is true}
- */
-function assertDone(name, asyncName, complete) {
-  if (!complete) {
-    throw new Error(
-      '`' + name + '` finished async. Use `' + asyncName + '` instead'
-    )
-  }
-}
-
 /**
  * @param {Compatible | undefined} [value]
  * @returns {VFile}
