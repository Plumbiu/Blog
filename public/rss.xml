<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link/><generator>undefined - https://github.com/undefined</generator><description>undefined 的 material 风格博客</description><webMaster/><managingEditor/><language>zh-CN</language><atom:link href="undefined/rss.xml" ref="self" type="application/rss+xml"/><lastBuildDate>Sat Feb 03 2024 12:09:00 GMT+0000 (Coordinated Universal Time)</lastBuildDate><item><title>JS 面试题 (Copy)</title><link>undefined/post/JS 面试题 (Copy)</link><pubDate>Sat Feb 03 2024 12:09:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/JS 面试题 (Copy)</guid><description>JS一、数据类型1.JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。其中Symbol和BigInt是ES6中新增的数据类型：Symbol代表创建后独一无二且不可变的数据类型</description></item><item><title>JavaScript 事件循环</title><link>undefined/post/JavaScript 事件循环</link><pubDate>Mon Dec 18 2023 12:07:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/JavaScript 事件循环</guid><description>JavaScript虽然是一门单线程语言，但并不意味着所有代码都会阻塞，实现单线程非阻塞的方法就是事件循环JavaScript中，所有的任务都可以分为：同步任务：立即执行的任务，一般直接在主线程中执行异步任务：异步执行的任务，比如ajax请求、setTimeout定时任务等先从一段简单的代码开始，考虑下面代码的打印顺序：j</description></item><item><title>rust 基本知识（更新中）</title><link>undefined/post/rust 基本知识（更新中）</link><pubDate>Sun Nov 26 2023 10:04:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/rust 基本知识（更新中）</guid><description>本笔记大部分来自 https://github.com/sunface/rustcourse ，笔者进行了一部分简化和自己的理解表达式和语句Rust中，表达式会进行求值，然后返回一个值，例如5+6的返回值是11，因此它也是表达式利用表达式，可以做到其他语言无法实现的东西：rustfnmain(){lety=</description></item><item><title>vscode 插件主要功能</title><link>undefined/post/vscode 插件主要功能</link><pubDate>Tue Nov 14 2023 15:31:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/vscode 插件主要功能</guid><description>命令要想通过命令执行插件，我们应该配置两处：1.package.json中contributes.commands字段2.入口文件使用vscode.commands.registerCommandAPI注册命令package.json:json{&quot;contributes&quot;:{&quot;commands&quot;:[</description></item><item><title>rollup 插件开发</title><link>undefined/post/rollup 插件开发</link><pubDate>Thu Aug 24 2023 12:25:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/rollup 插件开发</guid><description>虚拟模块实例在开始学习rollup之前，我们先来讲解一下虚拟模块，虚拟模块指的是不通过文件系统就可以访问的成员，举一个例子：在开发vue项目的时候，我们可以引入.vue文件，这得益于vite工具提供的虚拟模块，而在其他环境中，引入.vue会报错一个虚拟模块的例子：typescript//index.jsimpor</description></item><item><title>rollup/pluginutils 的使用</title><link>undefined/post/rollup/pluginutils 的使用</link><pubDate>Tue Aug 22 2023 23:00:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/rollup/pluginutils 的使用</guid><description>接触到这个依赖是最近在做 https://github.com/truthRestorer/truthcli 时，发现vite把public文件夹下的.gitkeep也当做了打包文件。可能有的人会感觉到奇怪，为什么我要在public下加入.gitkeep，这是因为某些特殊原因，public会在dev和部署ve</description></item><item><title>Vue3源码 —— ast语法树(complie)</title><link>undefined/post/Vue3源码 —— ast语法树(complie)</link><pubDate>Mon Jul 24 2023 22:49:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue3源码 —— ast语法树(complie)</guid><description>parse&gt;parse.js包含ast语法树生成的函数ast语法树用于解析vue中template的模板，以便后续虚拟DOM及DIFF算法做准备! https://plumbiu.github.io/blogImg/QQ截图20230702164759.png 例如有以下模板：html&lt;div&gt;&lt;p&gt;hell</description></item><item><title>Vue3源码 —— complier/transform</title><link>undefined/post/Vue3源码 —— complier/transform</link><pubDate>Mon Jul 24 2023 22:49:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue3源码 —— complier/transform</guid><description>在compiler一章中，我们成功生成了vue的ast语法树，但我们知道，ast语法树不能被语言直接执行，他需要转换成真正的代码才可以。那么如何将ast语法树转换为真正的代码呢？在转换到真正的代码前(预告一下是通过codegen函数 ，需要经过transform的处理什么是transform&gt;一言以蔽之，ast告</description></item><item><title>几个简单的 Vite 插件</title><link>undefined/post/几个简单的 Vite 插件</link><pubDate>Sat Jul 22 2023 15:52:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/几个简单的 Vite 插件</guid><description>前置知识命名规范(来自官方 正如rollup中的 https://rollupjs.org/plugindevelopment/conventions)一样，vite插件也需要一定的命名规范：1.名字应当带有viteplugin前缀2.package.json中包含viteplugin关键字3.</description></item><item><title>硬件管理系统项目总结</title><link>undefined/post/硬件管理系统项目总结</link><pubDate>Wed Jun 28 2023 21:45:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/硬件管理系统项目总结</guid><description>历经千辛万苦，终于有了第一版的 https://github.com/Plumbiu/hardware_manager_nextjs ，笔记用于记录开发中遇到的问题NextAuthNextAuth用于单点登录的库，创建pages/api/[...nextauth].ts文件，内容如下typescriptimportNextAu</description></item><item><title>计算机网络(课程)</title><link>undefined/post/计算机网络(课程)</link><pubDate>Wed Jun 14 2023 21:36:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/计算机网络(课程)</guid><description>计算机网络系统的主要功能、网络类型计算机网络是将地理位置不同，且有独立功能的多个计算机系统利用通信设备和线路互相连接起来，且以功能完善的网络软件（包括网络通信协议、网络操作系统等）实现网络资源共享的系统特点及功能特点：1.计算机系统是多个的——多机系统2.异地，也就各个计算机系统所处的地理位置不同3.功能独立——计算机是具有独立工作能力的4.</description></item><item><title>Vue源码 —— ast抽象语法树(vue2)</title><link>undefined/post/Vue源码 —— ast抽象语法树(vue2)</link><pubDate>Tue May 30 2023 18:12:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue源码 —— ast抽象语法树(vue2)</guid><description>这篇笔记实现的都是简易版的，有些情况是没有考虑进去的代码仓库：https://github.com/Plumbiu/vue_source_code什么是AST抽象语法树JS中的抽象语法树(AbstractSyntaxTree 本质上就是一个JS对象! https://plumbiu.github.io/blogImg/QQ截图202305290831</description></item><item><title>Vue源码 —— 虚拟DOM和diff算法</title><link>undefined/post/Vue源码 —— 虚拟DOM和diff算法</link><pubDate>Sun May 28 2023 23:27:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue源码 —— 虚拟DOM和diff算法</guid><description>这里的diff算法和虚拟DOM都是简易版的，有很多情况没有讨论代码仓库：https://github.com/Plumbiu/vue_source_code提前了解的知识insertBeforeNode.insertBefore( 方法在参考节点之前插入一个拥有指定父节点的子节点javascriptconstinsertedNode</description></item><item><title>Vue源码 —— mustache语法</title><link>undefined/post/Vue源码 —— mustache语法</link><pubDate>Sun May 21 2023 21:50:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue源码 —— mustache语法</guid><description>这篇笔记实现主要是简单的mustache.js，跟vue的模板语法相比，简单了许多(vue的太难了，先从基础学起 代码仓库：https://github.com/Plumbiu/vue_source_codemustachemustache译为胡子，因为它的语法{{}}非常像胡子，官方地址： https</description></item><item><title>JS 中的数据类型</title><link>undefined/post/JS 中的数据类型</link><pubDate>Sat May 20 2023 21:24:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/JS 中的数据类型</guid><description>此笔记来自于笔者在手写vue源码时，忘记了JS中的数据类型，导致很多地方不理解JS中的数据类型分为基本数据类型和引用数据类型，变量赋值也分为深拷贝和浅拷贝基本数据类型又叫做基本数据类型或者值类型，引用数据类型又叫做复杂类型堆栈事实上，JS并没有完善的堆栈系统，这里借助堆栈容易理解。为此微软重写了JavaScript，发明了TypeS</description></item><item><title>正则表达式</title><link>undefined/post/正则表达式</link><pubDate>Wed May 17 2023 22:31:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/正则表达式</guid><description>什么是正则表达式正则表达式是用于匹配字符串中字符组合的模式，有许多应用场景，例如：判断用户输入的输入的手机号/邮箱是否合法用户注册密码/账号长度和字符限制...基本使用JS中定义正则表达式参考一下语法：typescript//1.定义constreg1=/前端/constreg2=/abc/使</description></item><item><title>vue-router</title><link>undefined/post/vue-router</link><pubDate>Tue May 16 2023 14:07:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/vue-router</guid><description>配置路由基本的框架：typescriptimport{createRouter,createWebHashHistory}from'vuerouter'importtype{RouteRecordRaw}from'vuerouter'constroutes:RouteRecordRaw[]=[]constrout</description></item><item><title>实验室第二次例会</title><link>undefined/post/实验室第二次例会</link><pubDate>Sun May 14 2023 19:55:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/实验室第二次例会</guid><description>TypeScriptTypeScript文件以.ts结尾，在使用ts之前，需要安装typescript和tsnode：bashnpmigtypescripttsnode想要测试写的文件，请使用以下命令：bashtsnodefileName.ts其实是用nodemon也可以</description></item><item><title>NextJS国际化、前端图片显示</title><link>undefined/post/NextJS国际化、前端图片显示</link><pubDate>Wed May 10 2023 14:16:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/NextJS国际化、前端图片显示</guid><description>此笔记是基于开发 https://formatjs.io/doc</description></item><item><title>fetch API</title><link>undefined/post/fetch API</link><pubDate>Wed May 10 2023 18:40:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/fetch API</guid><description>fetch基础知识在以前的开发中，向服务端请求数据是非常繁琐的事情我们可以通过Ajax向服务器请求数据，而Ajax本质是使用XMLHttpRequest对象实现的javascript//1.创建一个xhr对象letxhr=newXMLHttpRequest( //2.设置请求方式和请求地址xhr.open('get'</description></item><item><title>React Native</title><link>undefined/post/React Native</link><pubDate>Fri Apr 21 2023 23:08:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/React Native</guid><description>代码仓库： https://github.com/Plumbiu/RN 环境安装这里使用yarn和expo安装，yarn安装速度快且占用磁盘空间小，expo提供了web预览的功能，更容易上手bashyarncreateexpoapp如果想要使用web预</description></item><item><title>实验室第一次例会</title><link>undefined/post/实验室第一次例会</link><pubDate>Mon Apr 10 2023 13:50:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/实验室第一次例会</guid><description>四轮问题代码风格1.if、{}、''、运算符、;bad:javascriptif( {letage=18;letstr=&quot;fff";}else{}functionxxx(){}goodjavascriptif(){letage=18letstr='</description></item><item><title>一个简单的注册登录API(prisma+express+ts)</title><link>undefined/post/一个简单的注册登录API(prisma+express+ts)</link><pubDate>Fri Mar 31 2023 22:30:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/一个简单的注册登录API(prisma+express+ts)</guid><description>初始化工作我们直接使用prisma官方给出的typescript+express官方示例： https://</description></item><item><title>重学JavaScript——ES6</title><link>undefined/post/重学JavaScript——ES6</link><pubDate>Tue Mar 28 2023 11:19:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——ES6</guid><description>很早之前已经做过有关Object和Array的笔记了，这次主要是复习重点：Object： https://bl</description></item><item><title>前后端授权的代码实现(cookie、session、token)</title><link>undefined/post/前后端授权的代码实现(cookie、session、token)</link><pubDate>Sun Mar 26 2023 22:45:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/前后端授权的代码实现(cookie、session、token)</guid><description>最终项目代码的仓库： https://github.com/Plumbiu/authorization 这里只讲解一些基本的用法Cookieexpress实现cookiejavascriptconstexpress=require('express')constapp=express()</description></item><item><title>monorepo项目的搭建(husky+eslint+prettier+git hooks)</title><link>undefined/post/monorepo项目的搭建(husky+eslint+prettier+git hooks)</link><pubDate>Sat Mar 25 2023 11:29:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/monorepo项目的搭建(husky+eslint+prettier+git hooks)</guid><description>项目文件： https://plumbiu.github.io/blogImg/Snipaste_20230</description></item><item><title>前后端鉴权</title><link>undefined/post/前后端鉴权</link><pubDate>Sat Mar 25 2023 21:40:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/前后端鉴权</guid><description>问题的由来HTTP协议是无状态的，这意味着如果客户端每次要与服务端通信，都必须重新与服务端连接，客户端请求一次，服务端才会响应一次，每一次请求都与之前的请求无关。这样会产生的问题：无法判断多次请求是否都由一个人发起用户访问有权限的页面，每次都需要重新登录，影响用户体验为了解决这些问题，便诞生了cookie、token、session，</description></item><item><title>axios(未完待续~~)</title><link>undefined/post/axios(未完待续~~)</link><pubDate>Thu Mar 23 2023 21:09:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/axios(未完待续~~)</guid><description>Axios起步Axios是一个基于promise的网络请求库，可作用于nodejs和浏览器中安装选择你喜欢的包管理器npm:bashnpminstallaxiosyarn:bashyarnaddaxios简单请求&gt;注：get和post请求均可以直接使用a</description></item><item><title>重学CSS——CSS选择器</title><link>undefined/post/重学CSS——CSS选择器</link><pubDate>Tue Mar 21 2023 11:30:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学CSS——CSS选择器</guid><description>代码仓库： https://github.com/Plumbiu/css_review_selector 基本选择器类型选择器类型选择器也叫做“标签名选择器”或者是“元素选择器”，是由于在文档中选择了一个HTML标签/元素：cssh1{color:red;}div{mar</description></item><item><title>重学CSS——flex弹性布局</title><link>undefined/post/重学CSS——flex弹性布局</link><pubDate>Tue Mar 21 2023 11:30:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学CSS——flex弹性布局</guid><description>flex布局基本概念flex布局，也被称为弹性布局，是CSS3新增的一种布局，只需要给父元素添加display:flex;即可flex布局特点1.子元素默认横向显示，但是子孙元素不会受影响2.子元素会默认变成块级元素，能设置宽度高度3.如果只有一个子元素的话，则给子元素添加margin:auto;时，子元素会直接实</description></item><item><title>Electron 基础篇(未完~~)</title><link>undefined/post/Electron 基础篇(未完~~)</link><pubDate>Mon Mar 20 2023 14:26:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Electron 基础篇(未完~~)</guid><description>代码仓库： https://github.com/Plumbiu/electron (其实很早就开始学了，奈何本人实力太弱，笔记基本都是抄的官网或者别人的，不好意思放到博客里。最近又开始学了，开始整理一下自己的思路，这下都是自己思考来的了)Electron安装推荐使用vite创建，但是刚入门，还是从头开始配置好了shel</description></item><item><title>图像处理</title><link>undefined/post/图像处理</link><pubDate>Mon Mar 20 2023 14:26:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/图像处理</guid><description>图像处理基础RGB&gt;灰度转换公式c++intIntensity=R0.0299+G0.587+b0.144;近似公式c++intIntensity=(R+G+B /3;Mat类什么是Mat类1.类：c++中的数据和方法的集合2.可用</description></item><item><title>Zustand——React状态管理库</title><link>undefined/post/Zustand——React状态管理库</link><pubDate>Fri Mar 17 2023 14:22:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Zustand——React状态管理库</guid><description>代码仓库： https://github.com/Plumbiu/zustand 基本使用Zustand是React的持久化管理库，支持插件系统JavaScript示例这里讨论的是JS的用法，创建TS文件是为了以后更改方便&gt;JS用法在TS中会警告，影响不大定义</description></item><item><title>前端测试</title><link>undefined/post/前端测试</link><pubDate>Tue Mar 14 2023 22:38:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/前端测试</guid><description>Mocha有时候我们写了一个函数，需要测试函数是否正确。如果使用console.log测试，项目部署后又要删除，所以并不合理。单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试性工作。mocha是JavaScript的一种单元测试框架，既可以在浏览器中运行，也可以在Node.js环境测试初始化yarnaddm</description></item><item><title>构建工具(Webpack、Vite)</title><link>undefined/post/构建工具(Webpack、Vite)</link><pubDate>Mon Mar 13 2023 15:39:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/构建工具(Webpack、Vite)</guid><description>构建工具简介前端编写html、css和js时，会因为模块化不能正常使用(有些浏览器不支持，例如以下代码 ，即使抛开兼容性，也会面临模块加载过多的问题，所以就希望有一款工具可以对代码进行打包，将多个模块打包成一个文件，这样既解决了兼容性问题，又解决了模块过多的问题html&lt;scripttype=&quot;module&quot;&gt;&lt;/script&gt;同时构建工具还起着</description></item><item><title>MDN-Array</title><link>undefined/post/MDN-Array</link><pubDate>Tue Feb 28 2023 16:17:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/MDN-Array</guid><description>数组下标Array对象不能使用任意字符串作为元素索引，必须使用非负整数。数组元素是对象属性，就是toString是属性(准确一点是方法 一样。同时，JavaScript语法要求使用方括号表示法，而不是点号表示法来访问以数字开头的属性，也可以用引号包裹数组下表(例如，years[‘2’]而不是years[2])javascriptcons</description></item><item><title>Slidev——网页PPT</title><link>undefined/post/Slidev——网页PPT</link><pubDate>Tue Feb 28 2023 16:17:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Slidev——网页PPT</guid><description>安装shellyarncreateslidev跟随命令行提示，会自动打开幻灯片，网址为:http://localhost:3030全局安装如果觉得每一次手动安装模板太麻烦，可以在全局安装Slidev：shellnpmig@slidev/cli然后即可在任何地方直接输入slidev，即可创建模板</description></item><item><title>MDN-Object</title><link>undefined/post/MDN-Object</link><pubDate>Sun Feb 26 2023 16:47:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/MDN-Object</guid><description>从一个对象上删除一个属性Object自身没有提供方法删除其自身属性(但是Map中的Map.prototype.delete( 可以删除自身属性)，为了删除对象上的属性，必须使用delete操作符：javascriptconstperson={name:'xj',address:'hdu'}console.log(</description></item><item><title>TS</title><link>undefined/post/TS</link><pubDate>Tue Jan 03 2023 16:33:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/TS</guid><description>TS常用类型可以将TS常用基础类型分为两类：1.JS已有类型原始类型：number、string、boolean、null、undefined、symbol对象类型：object(数组、对象、函数等 2.TS新增类型联合类型：自定义类型(类型别名)、接口、元组、字面量类型、枚举、void、</description></item><item><title>Puppeteer 爬取推特图片/视频</title><link>undefined/post/Puppeteer 爬取推特图片/视频</link><pubDate>Tue Jan 02 2024 08:30:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Puppeteer 爬取推特图片/视频</guid><description>2024年第一篇文章.本文章的完整代码在 https://github.com/Plumbiu/twid 可以看到，项目已经实现通过命令行的方式爬取推特图片/视频了，这里介绍一下基本思路。Puppeteer是一个Node工具库，它提供了一套高阶API来通过DevTools协议控制Chromium或Chrome——官方介绍</description></item><item><title>Vue 组件之间的数据传递</title><link>undefined/post/Vue 组件之间的数据传递</link><pubDate>Sun Jul 09 2023 22:59:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue 组件之间的数据传递</guid><description>父向子传值只需要父向子传值有三种方法：1.prop传参：直接将数据作为子组件标签元素即可2.provide、inject依赖注入prop传参父组件Father.vue：vue&lt;scriptsetup&gt;importSonfrom'./Son.vue'&lt;/script&gt;&lt;template&gt;&lt;Sonmsg=</description></item><item><title>Vue3源码 —— 响应式原理</title><link>undefined/post/Vue3源码 —— 响应式原理</link><pubDate>Sat Jul 08 2023 16:21:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Vue3源码 —— 响应式原理</guid><description>Vue中的响应式原理是基于 https://developer.mozilla.org/zhCN/docs/Web/JavaScript/Reference/Global_Objects/Proxy 如果我们想使用响应式数据，可以这样写：html&lt;scriptsrc=&quot;@vue/reactiveity/dist/reactivi</description></item><item><title>前端面试题总结(基础篇)~未完</title><link>undefined/post/前端面试题总结(基础篇)~未完</link><pubDate>Thu Jun 08 2023 19:34:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/前端面试题总结(基础篇)~未完</guid><description>HTTP，HTML，浏览器介绍一下HTTP和HTTPS&gt;HTTPS的SSL加密实在传输层实现的HTTP和HTTPS的基本概念2HTTP：超文本传输协议，是互联网上应用最广泛的一种网络协议，是客户端和服务端请求和相应的标准(TCP ，用于从WWW服务器传输超文本到本地浏览器的传输协议，HTTP协议可以使浏览器更加高</description></item><item><title>重学JavaScript——浏览器事件和DOM(未完)</title><link>undefined/post/重学JavaScript——浏览器事件和DOM(未完)</link><pubDate>Fri Jun 02 2023 20:48:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——浏览器事件和DOM(未完)</guid><description>Node接口Node接口是DOM节点的一些共同的属性和方法，是DOM操作的基础属性Node.prototype提供了许多属性，供我们操作nodeTypenodeType属性是一个整数值，可以用来节点的类型：javascriptdocument.nodeType//9上述代码表示，文档节点(documen</description></item><item><title>NextJS 中的渲染模式</title><link>undefined/post/NextJS 中的渲染模式</link><pubDate>Thu May 04 2023 14:16:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/NextJS 中的渲染模式</guid><description>此笔记来源于笔者未完全理解NextJS中的渲染模式渲染模式CSR(ClientSideRendering 客户端渲染，Vue、React等框架采用的渲染模式，需要使用JavaScript，调用接口API来获取数据，前后端完全分离存在的问题：1.首次渲染白屏时间长2.首次构建只包含一串JavaScript脚本，不利于SEO</description></item><item><title>手写 Promise(未完)</title><link>undefined/post/手写 Promise(未完)</link><pubDate>Sun Apr 09 2023 21:08:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/手写 Promise(未完)</guid><description>代码仓库： https://github.com/Plumbiu/ES6_Type 手写挺难得，最后的race、all方法还没有实现，代码也不一定保证正确高阶函数高阶函数可以扩展功能，也可以对函数的参数进行预制参数什么是高阶函数函数满足以下条件，那么这个函数就是高阶函数该函数返回一个函数该函数参数</description></item><item><title>重学JavaScript——Reflect</title><link>undefined/post/重学JavaScript——Reflect</link><pubDate>Wed Apr 05 2023 21:08:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——Reflect</guid><description>前置知识JavaScript中允许指定函数中this的指向，提供了3个方法：call( apply()bind()call使用call方法调用函数，同时指定被调用函数的this的值javascriptfunc.call(thisArg,...args)thi</description></item><item><title>重学JavaScript——Proxy</title><link>undefined/post/重学JavaScript——Proxy</link><pubDate>Tue Apr 04 2023 11:01:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——Proxy</guid><description>代码仓库： https://github.com/Plumbiu/ES6_Type Proxy的作用Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”(metaprogramming)，即对编程语言进行编程Proxy：代理，可以在访问目标之前进行“拦截”，并且对此访问进行过滤和拦截</description></item><item><title>重学JavaScript——Set/Map</title><link>undefined/post/重学JavaScript——Set/Map</link><pubDate>Sun Apr 02 2023 21:43:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——Set/Map</guid><description>代码仓库： https://github.com/Plumbiu/ES6_Type SetSet是一种数据结构，类似于数组，但是没有重复的元素可以用Set构造函数生成Set数据结构1.Set构造函数参数可以是数组，用于数组的去重由于扩展运算符(...)内部使用forof循环</description></item><item><title>重学JavaScript——Symbol</title><link>undefined/post/重学JavaScript——Symbol</link><pubDate>Sun Apr 02 2023 11:27:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/重学JavaScript——Symbol</guid><description>代码仓库： https://github.com/Plumbiu/ES6_Type JS的原始类型ES6新增了JavaScript的原始类型：Symbol，现在JS的数据类型有7种：undefined、null、Boolean(布尔值)、String(字符串)、Number(数值)、Object</description></item><item><title>Pinia</title><link>undefined/post/Pinia</link><pubDate>Thu Mar 09 2023 18:51:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Pinia</guid><description>Pinia基本介绍&gt;Pinia是Vue的存储库，允许我们跨组件/页面共享状态主要：支持Vue2和Vue3Pinia中只有state、getter、action，抛弃了Vuex中的Mutation，减少工作量Pinia中action支持同步和异步，而Vuex不支持良好的Typescript支持</description></item><item><title>Prisma-Client</title><link>undefined/post/Prisma-Client</link><pubDate>Sat Mar 04 2023 14:49:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Prisma-Client</guid><description>Prisma：下一代ORM框架ORM：对象关系映射（ObjectRelationalMapping，简称ORM），主要实现程序对象到关系数据库数据的映射QuickStartpackage.jsonjson{&quot;name&quot;:&quot;server&quot;,&quot;version&quot;:&quot;0.0.0&quot;,&quot;license&quot;:&quot;MI</description></item><item><title>Plumbiu的第1次年度总结</title><link>undefined/post/Plumbiu的第1次年度总结</link><pubDate>Sun Mar 05 2023 23:01:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Plumbiu的第1次年度总结</guid><description>emmm，本来这个年度总结应该放在3月3号的，问就是太忙了忘记了😢😢😢，今天(3月5号 我将绞尽脑汁去回忆过去一年里发生了什么，因为第一次写年度总结，所以写的差理所应当🥰🥰🥰这一年里收获挺多的。从实验室考核接触到网络前端，几乎每天(甚至考试周，我dio不dio)都在学习。说一下最开始接触前端的感触吧，就是很简单的东西，但是知识点莫名其妙的很多，学了一年</description></item><item><title>AutoAnimate简单动画库的使用</title><link>undefined/post/AutoAnimate简单动画库的使用</link><pubDate>Wed Feb 08 2023 16:47:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/AutoAnimate简单动画库的使用</guid><description>贴一下官网地址： https://link.juejin.cn/?target=ht</description></item><item><title>Rollup基本使用</title><link>undefined/post/Rollup基本使用</link><pubDate>Wed Feb 08 2023 16:47:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/Rollup基本使用</guid><description>Rollup简介Rollup仅仅是一款ESM打包器，Rollup中并不支持类似HMR这种高级特性，Rollup并不是要与Webpack竞争，而是提供一个充分利用ESM各项特征的高效打包器。Rollup快速上手安装shellyarninityarnaddrollupdev基本使用在根目录中新</description></item><item><title>VueI18n</title><link>undefined/post/VueI18n</link><pubDate>Wed Feb 08 2023 16:47:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/VueI18n</guid><description>基本使用贴个官网： https://vuei18n.intlify.dev/ GettingStarted首先引入CDNhtml&lt;scriptsrc=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;&lt;scriptsrc=&quot;https://unpkg.c</description></item><item><title>mqtt协议简单使用</title><link>undefined/post/mqtt协议简单使用</link><pubDate>Wed Feb 08 2023 16:53:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/mqtt协议简单使用</guid><description>项目代码： https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FPlumbiu%2Fmqttjs&quot;https://github.com/Plumbiu/mqttjs&quot; 前置知识：mqtt.js、aedes（不知道aedes咋用的，可以看我上期的笔记[如何用no</description></item><item><title>使用nodejs简单搭建一个mqtt服务器</title><link>undefined/post/使用nodejs简单搭建一个mqtt服务器</link><pubDate>Wed Feb 08 2023 16:55:00 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/使用nodejs简单搭建一个mqtt服务器</guid><description>贴一下仓库地址： https://github.com/moscajs/aedes 什么是MQTTMQTT(英文全称MessageQueuingTelemetryTransport</description></item><item><title>React 全家桶(持续更新~~)</title><link>undefined/post/React 全家桶(持续更新~~)</link><pubDate>Fri Dec 30 2022 16:33:52 GMT+0000 (Coordinated Universal Time)</pubDate><author/><guid>undefined/post/React 全家桶(持续更新~~)</guid><description>1.RTK基本使用1.1Slice切片步骤:1.引入createSlicejavascriptimport{createSlice}from&quot;@reduxjs/toolkit&quot;2.创建slice对象javascriptconstxxxSlice=cr</description></item></channel></rss>